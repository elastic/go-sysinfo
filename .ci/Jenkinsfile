#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-18 && immutable' }
  environment {
    REPO = "go-sysinfo"
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    JOB_GIT_CREDENTIALS = "f6c7695a-671e-4f4f-a331-acdce44ff9ba"
    PIPELINE_LOG_LEVEL = 'INFO'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i)(.*(?:jenkins\\W+)?run\\W+(?:the\\W+)?tests(?:\\W+please)?.*|^\\/test$)')
  }
  stages {
    stage('Checkout') {
      steps {
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}")
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    stage('Test') {
      failFast false
      matrix {
        axes {
          axis {
            name 'GO_VERSION'
            values '1.17.11', '1.18.3'
          }
          axis {
            name 'PLATFORM'
            values 'ubuntu-18 && immutable', 'windows-2019 && immutable', 'orka && darwin && x86_64', 'orka && darwin && arm64'
          }
          axis {
            name 'CGO_ENABLED'
            values '0', '1'
          }
        }
        excludes {
          exclude {
            axis {
              name 'GO_VERSION'
              values '1.17.11'
            }
            axis {
              name 'PLATFORM'
              values 'orka && darwin && arm64'
            }
          }
          exclude {
            axis {
              name 'GO_VERSION'
              values '1.18.3'
            }
            axis {
              name 'PLATFORM'
              notValues 'orka && darwin && arm64'
            }
          }
        }
        stages {
          stage('Test') {
	    environment {
	      CGO_ENABLED = "${env.CGO_ENABLED}"
            }
            options { skipDefaultCheckout() }
            agent { label "${PLATFORM}" }
            steps {
              withGithubNotify(context: "Test-${GO_VERSION}-${PLATFORM}") {
                deleteDir()
                unstash 'source'
                withGoEnv(version: "${GO_VERSION}"){
                  dir("${BASE_DIR}"){
                    whenTrue(isUnix()) {
                      sh(label: "go test for ${GO_VERSION} in ${PLATFORM}", script: '.ci/scripts/test.sh')
                    }
                    whenFalse(isUnix()) {
                      bat(label: "go test for ${GO_VERSION} in ${PLATFORM}", script: '.ci/scripts/test.bat')
                    }
                  }
                }
              }
            }
            post {
              always {
                junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/build/*.xml")
              }
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}
